#!/bin/lua

-- sonic visits ohio
local mizOS = dofile("/var/mizOS/core/mizOS.lua")


-- Channel data
local channels = {
	["-m"] = "mizos",
	["-u"] = "ui",
	["-p"] = "pacman",
	["-a"] = "aur"
}


-- Shorten command execution function
local function x(cmd)
	os.execute(cmd)
end

-- Collects all package names
local function setpkgs(args)
	local pacs = {}
	for _,ag in pairs(args) do
		if ag ~= "fetch"
		and ag ~= "remove"
		and not channels[ag] then
			table.insert(pacs, ag)
		end
	end
	return pacs
end


-- Say error
local function error(text)
	print("!!> \x1b[38;2;243;139;168m" .. text .. "\x1b[38;2;255;255;255m")
end

-- Get input
local function read()
	io.write("\n> ")
	return io.read()
end

-- Say output
local function say(text)
	print("| " .. text)
end

-- Alternate say
local function say2(text)
	print("    > " .. text)
end


-- Write output
local function write(text)
	print(text)
end


-- Process data returned from mizOS backend
local function process(data)
	local datatype = data[1]
	local contents = data[2]
	if datatype == "output" then
		echo(datatype, contents)
	elseif datatype == "error" then
		echo(datatype, contents)
	elseif datatype == "command" then
		x(contents)
	end
end


-- Service management
local function sv(args)
	local data = mizos.service(args[2], args[3])
	if data then
		process(data)
	end
end

-- Fetch/remove packages
local function fandr(args)
	local pacs = setpkgs(args)
	local data = mizos.software(args[1], channels[args[2]], pacs)
	if data then
		process(data)
	end
end

-- Clear cache
local function cc(args)
	local data = mizos.software("clear cache", nil, nil)
	if data then
		process(data)
	end
end

-- List packages
local function list(args)
	local data = mizos.software("list packages", channels[args[1]], nil)
	if data and data[1] ~= "info" then
		process(data)
		elseif data[1] == "info" then
		echo("output", "mizOS package list:")
		for _,pkg in pairs(data[2]) do
			echo("rawput", pkg)
		end
	end 
end

-- GPU management
local function gfx(args)
	local data
	if args[2] == "mode" then
		data = mizos.gfx("mode", args[3], args)
	else
		data = mizos.gfx(args[2], nil, args)
	end
	if data then
		process(data)
	end
end

-- mizOS configuration
local function config(args)
	local data = mizos.config(args[2], args[3])
	if data[1] and data[2] then
		process(data)
	end
end

-- mizOS system updating
local function update(args)
	local dev = false
	if args[2] == "dev" then
		dev = true
	end
	mizos.update("system", dev)
	mizos.update("packages", dev)
end

-- System info
local function info(args)
	local data = mizos.info(args[2])
	if data[1] and data[1] ~= "info" then
		process(data)
	elseif data[1] == "info" then
		if data[2][1] == "desktops" then
			echo("output", "mizOS DE/WM list:")
			for _,desktop in pairs(data[2][2]) do
				local dtype = ""
				if desktop[3] == true then
					dtype = "      (AUR)"
				elseif desktop[3] == false then
					dtype = "      (pacman)"
				end
				print(desktop[1] .. dtype)
			end
		end
	end
end

-- System safety
local function safety(args)
	local data
	if args[3] ~= nil then
		data = mizos.safety(args[2], args[3])
	else
		data = mizos.safety(args[2], nil)
	end
	if data then
		process(data)
	end
end


-- Command proccessor
local basecommands = {
	["sv"] = sv,
	["fetch"] = fandr,
	["remove"] = fandr,
	["cc"] = cc,
	["list"] = list,
	["gfx"] = gfx,
	["config"] = config,
	["update"] = update,
	["info"] = info,
	["backup"] = safety,
	["restore"] = safety
}


local args = {}
for _,v in pairs(arg) do
	if v ~= "/bin/lua" and v ~= "miz" and v ~= "/usr/bin/miz" then
		table.insert(args, v)
	end
end

if basecommands[args[1]] then
	basecommands[args[1]](args)
else
	local command = ""
	for _,cmd in pairs(args) do
		command = command .. cmd .. " "
	end
	mizos.root(command)
end
