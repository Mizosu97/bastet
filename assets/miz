#!/bin/lua
local home = os.getenv("HOME")

local function x(cmd)
	os.execute(cmd)
end

local function ipkg(pkg)
	x("sudo pacman -S " .. pkg)
end

local function ypkg(pkg)
	x("yay -S " .. pkg)
end

local function checkfile(name)
	local file = io.open(name, "r")
        if file ~= nil then
                io.close(file)
                return true                                             end
end

local init
if checkfile(home .. "/.mizOS/init/runit") == true then
	init = "runit"
elseif checkfile(home .. "/.mizOS/init/systemd") == true then
	init = "systemd"
else
	print("Your init system isnt supported lol")
end

des = {
	{"budgie", "budgie-desktop", false},
	{"cinnamon", "cinnamon", false},
	{"cutefish", "cutefish", false},
	{"deepin", "deepin", false},
	{"enlightenment", "enlightenment", false},
	{"gnome", "gnome", false},
	{"gnome-flashback", "gnome-flashback", false},
	{"kde", "plasma", false},
	{"lxde", "lxde", false},
	{"lxqt", "lxqt", false},
	{"mate", "mate", false},
	{"sugar", "sugar sugar-fructose", false},
	{"ukui", "ukui", false},
	{"xfce", "xfce4", false},
	{"cde", "cdesktopenv", true},
	{"ede", "ede", true},
	{"kde1", "kde1-kdebase-git", true},
	{"liri", "liri-shell-git", true},
	{"lumina", "lumina-desktop", true},
	{"moksha", "moksha-git", true},
	{"pantheon", "pantheon-session-git", true},
	{"paperde", "paperde", true},
	{"phosh", "phosh", true},
	{"plasma-mobile", "plasma-mobile", true},
	{"thedesk", "thedesk", true},
	{"trinity", "trinity", false},
	{"maui", "maui-shell-git", true}
}



wms = {

	{"2bwm", "2bwm", true},
	{"9wm", "9wm", true},
	{"afterstep", "afterstep-git", true},
	{"berry", "berry-git", true},
	{"blackbox", "blackbox", false},
	{"compiz", "compiz", false},
	{"cwm", "cwm", true},
	{"eggwm", "eggwm", true},
	{"enlightenment", "enlightenment", false},
	{"evilwm", "evilwm", true},
	{"fluxbox", "fluxbox", false},
	{"flwm", "flwm", true},
	{"fvmm", "fvmm", true},
	{"gala", "gala", false},
	{"goomwwm", "goomwwm", true},
	{"icewm", "icewm", false},
	{"jbwm", "jbwm", true},
	{"jwm", "jwm", false},
	{"karmen", "karmen", true},
	{"kwin", "kwin", false},
	{"lwm", "lwm", false},
	{"marco", "marco", false},
	{"metacity", "metacity", false},
	{"muffin", "muffin", false},
	{"mutter", "mutter", false},
	{"mwm", "openmotif", false},
	{"openbox", "openbox", false},
	{"pawm", "pawm", true},
	{"pekwm", "pekwm", false},
	{"sawfish", "sawfish", true},
	{"sowm", "sowm", true},
	{"tinywm", "tinywm", true},
	{"twm", "xorg-twm", false},
	{"ukwm", "ukwm", false},
	{"uwm", "ude", true},
	{"wind", "windwm", true},
	{"windowlab", "windowlab", true},
	{"windowmaker", "windowmaker", true},
	{"wm2", "wm2", true},
	{"worm", "worm-git", true},
	{"xfwm", "xfwm4", false},
	{"bspwm", "bspwm", false},
	{"exwm", "exwm-git", true},
	{"herbstluftwm", "herbstluftwm", false},
	{"i3", "i3-wm", false},
	{"larswm", "larswm", true},
	{"leftwm", "leftwm", true},
	{"notion", "notion", false},
	{"ratpoison", "ratpoison", false},
	{"stumpwm", "stumpwm", false},
	{"subtle", "subtle-hg", true},
	{"wmfs2", "wmfs2-git", true},
	{"awesome", "awesome", false},
	{"dwm", "dwm", true},
	{"echinus", "echinus", true},
	{"frankenwm", "frankenwm", true},
	{"i3-gaps", "i3-gaps", false},
	{"spectrwm", "spectrwm", false},
	{"sway", "sway", false},
	{"qtile", "qtile", false},
	{"xmonad", "xmonad", false}
}



if arg[1] == "service" then
	if init == "runit" then
		if arg[2] == "link" then
			x("sudo ln -s /etc/runit/sv/" .. arg[3] .. " /run/runit/service/")
		elseif arg[2] == "unlink" then
			x("sudo rm /run/runit/service/" .. arg[3])
		elseif arg[2] == "disable" then
			x("sudo touch /run/runit/service/" .. arg[3] .. "/down")
		elseif arg[2] == "enable" then
			x("sudo rm /run/runit/service/" .. arg[3] .. "/down")
		elseif arg[2] == "start" then
			x("sudo sv start " .. arg[3])
		elseif arg[2] == "stop" then
			x("sudo sv stop " .. arg[3])
		elseif arg[2] == "restart" then
			x("sudo sv restart " .. arg[3])
		elseif arg[2] == "list" then
			if arg[3] == "installed" then
				x("ls /etc/runit/sv/")
			elseif arg[3] == "linked" then
				x("ls /run/runit/service/")
			end
		end
	elseif init == "systemd" then
		if arg[2] == "link" then
                	print("already done")
		elseif arg[2] == "unlink" then            
			print("brah??")
		elseif arg[2] == "disable" then
                        x("sudo systemctl disable " .. arg[3])
                elseif arg[2] == "enable" then
                        x("sudo systemctl enable " .. arg[3])
                elseif arg[2] == "start" then
                        x("sudo systemctl start " .. arg[3])
		elseif arg[2] == "stop" then
                        x("sudo systemctl stop " .. arg[3])
                elseif arg[2] == "restart" then
			x("sudo systemctl restart " .. arg[3])
                elseif arg[2] == "list" then  
			if arg[3] == "installed" then   
				x("systemctl list-units --type=service --all")
                        elseif arg[3] == "linked" then    
				x("systemctl list-units --state=enabled")  
			end    
		end
	end
elseif arg[1] == "pac" then
	if arg[2] == "fetch" then
		if arg[3] == "neofetch" then
			print("Neofetch is already installed, forcing it to install will most likely break it.")
		else
			ipkg(arg[3])
		end
	elseif arg[2] == "remove" then
		x("sudo pacman -R " .. arg[3])
	elseif arg[2] == "sync" then
		x("sudo pacman -Sy")
	elseif arg[2] == "update" then
		print("STOOOOOOPPPPPPPPP")
	end
elseif arg[1] == "aur" then
	if arg[2] == "fetch" then
		ypkg(arg[3])
	elseif arg[2] == "remove" then
		x("yay -R " .. arg[3])
	elseif arg[2] == "update" then
		x("yay -Syu")
	end
elseif arg[1] == "desktop" then
	if arg[2] == "list" then
		print("List of Desktop Environments:")
		print(" ")
		for _,desktop in pairs(des) do
			local name
			if desktop[3] == false then
				name = desktop[1] .. "   (pacman)"
			elseif desktop[3] == true then
				name = desktop[1] .. "   (AUR)"
			end
			print(name)
		end
	elseif arg[2] == "fetch" then
		for _,desktop in pairs(des) do
			if desktop[1] == arg[3] then
				if desktop[3] == false then
					ipkg(desktop[2])
				elseif desktop[3] == true then
					ypkg(desktop[2])
				end
			end
		end
	end
elseif arg[1] == "wm" then
	if arg[2] == "list" then
		print("List of Window Managers:")
		print(" ")
		for _,wm in pairs(wms) do
			if wm[3] == false then
				name = wm[1] .. "   (pacman)"
			elseif wm[3] == true then
				name = wm[1] .. "   (AUR)"
			end
			print(name)
		end
	elseif arg[2] == "fetch" then
		for _,wm in pairs(wms) do
			if wm[1] == arg[3] then
				if wm[3] == false then
					ipkg(wm[2])
				elseif wm[3] == true then
					ypkg(wm[2])
				end
			end
		end
	end
elseif arg[1] == "info" then
	if arg[2] == "help" then
		print(" ")
		print("https://github.com/Mizosu97/mizOS")
		print(" ")
	elseif arg[2] == "creator" then
		print(" ")
		print("https://sudev.neocities.org")
		print(" ")
	end
elseif arg[1] == "system" then
	if arg[2] == "update" then
		print("Update mizOS? Y/N")
		if io.read() == "Y" then
			x("sudo rm -rf $HOME/.mizOS/src/mizOS")
			x("cd $HOME/.mizOS/src && git clone https://github.com/Mizosu97/mizOS")
			x("sudo rm /usr/bin/miz")
			x("rm -rf $HOME/.config/youri3backup")
			x("rm -rf $HOME/.config/yourpicombackup")
			x("rm -rf $HOME/.config/youralacrittybackup")
			x("cd $HOME/.mizOS/src/mizOS && ./install")
		end
	end
else
	print("! Error ! Invalid command!")
end

















